// =======================
// Flipbook App - Full JS
// Merged Version
// =======================

// --- Global Variables ---
let currentPage = 1; // 1-based indexing
let totalPages = (typeof config !== 'undefined' && config.totalPages) ? config.totalPages : 1;
let isDrawing = false;
let isDrawModeOn = false; // Toggles the whole draw UI
let toolType = "highlight"; // highlight | pen | eraser
let currentHighlightColor = 'rgba(255, 255, 0, 0.2)';
let currentBrushSize = 40;
let lastX = 0, lastY = 0;

// --- Data & Config ---
let ALLOWED_IDS = [];
let bookTextData = {};
const imagePath = (typeof config !== 'undefined' && config.imagePath) ? config.imagePath : './images/Book_PHYS101_';
const thumbPath = (typeof config !== 'undefined' && config.thumbPath) ? config.thumbPath : './thumbs/Book_PHYS101_';
const images = Array.from({ length: totalPages }, (_, i) => `${imagePath}${i}.png`);
const thumbs = Array.from({ length: totalPages }, (_, i) => `${thumbPath}${i}.jpg`);
const APPS_SCRIPT_PROXY_URL = (typeof config !== 'undefined' && config.appsScriptProxyUrl) ? config.appsScriptProxyUrl : '';

// --- DOM Elements ---
let flipbook, thumbbar, counter, pageInput, footer, indexToggle, indexMenu, indexSidebar, bookContainer;
let phetModal, phetBtn, phetCloseBtn, phetFrame, videoModal, videoBtn, videoCloseBtn, videoFrame;
let toggleDrawModeBtn, highlightSettingsBtn, highlightPopup, colorSwatchesContainer, penToolBtnPopup, highlightToolBtn, eraserToolBtnPopup, brushSizeSliderPopup, clearHighlightsBtnPopup;
let searchBtn, searchContainer, searchInput, searchCloseBtn, searchResults;
let aiModal, aiHelperToggle, aiCloseBtn, aiResponseEl, aiLoadingEl, aiChapterTitleEl;
let highlightCanvas, ctx;

// --- State Variables ---
let hammerManager = null;
let currentScale = 1, currentOffsetX = 0, currentOffsetY = 0, pinchStartScale = 1, isPinching = false;
let pageInputTimer = null;

// --- Initialization ---
document.addEventListener("DOMContentLoaded", () => {
Â  Â  console.log("ðŸ“˜ Flipbook app initializing...");

Â  Â  // Assign all DOM elements
Â  Â  assignDOMElements();

Â  Â  // Start async setup
Â  Â  initApp();

Â  Â  // Setup all interactive components
Â  Â  setupLogin();
Â  Â  setupToolbar();
Â  Â  setupSidebarToggle(); // Use new simple sidebar
Â  Â  setupModals();
Â  Â  setupAIHelper();
Â  Â  setupHighlightTools();
Â  Â  setupSearch();
Â  Â  setupGlobalListeners();
});

/**
 * Assigns all global DOM element variables
 */
function assignDOMElements() {
Â  Â  flipbook = document.getElementById("flipbook");
Â  Â  thumbbar = document.getElementById("thumbbar");
Â  Â  counter = document.getElementById("pageCounter");
Â  Â  pageInput = document.getElementById("pageInput");
Â  Â  footer = document.getElementById("footer");
Â  Â  indexToggle = document.getElementById("indexToggle");
Â  Â  indexMenu = document.getElementById("indexMenu");
Â  Â  indexSidebar = document.getElementById('indexSidebar');
Â  Â  bookContainer = document.querySelector('.book-container');

Â  Â  phetModal = document.getElementById('phetModal');
Â  Â  phetBtn = document.getElementById('phetBtn');
Â  Â  phetCloseBtn = document.getElementById('phetCloseBtn');
Â  Â  phetFrame = document.getElementById('phetFrame');
Â  Â  videoModal = document.getElementById('videoModal');
Â  Â  videoBtn = document.getElementById('videoBtn');
Â  Â  videoCloseBtn = document.getElementById('videoCloseBtn');
Â  Â  videoFrame = document.getElementById('videoFrame');

Â  Â  toggleDrawModeBtn = document.getElementById('toggle-draw-mode-btn');
Â  Â  highlightSettingsBtn = document.getElementById('highlight-settings-btn');
Â  Â  highlightPopup = document.getElementById('highlight-popup');
Â  Â  colorSwatchesContainer = document.querySelector('.color-swatches');
Â  Â  penToolBtnPopup = document.getElementById('pen-tool-btn-popup');
Â  Â  highlightToolBtn = document.getElementById('highlight-tool-btn');
Â  Â  eraserToolBtnPopup = document.getElementById('eraser-tool-btn-popup');
Â  Â  brushSizeSliderPopup = document.getElementById('brush-size-popup');
Â  Â  clearHighlightsBtnPopup = document.getElementById('clear-highlights-btn-popup');

Â  Â  searchBtn = document.getElementById('searchBtn');
Â  Â  searchContainer = document.getElementById('searchContainer');
Â  Â  searchInput = document.getElementById('searchInput');
Â  Â  searchCloseBtn = document.getElementById('searchCloseBtn');
Â  Â  searchResults = document.getElementById('searchResults');

Â  Â  aiModal = document.getElementById("aiHelperModal");
Â  Â  aiHelperToggle = document.getElementById("aiHelperToggle");
Â  Â  aiCloseBtn = document.getElementById("aiCloseBtn");
Â  Â  aiResponseEl = document.getElementById("aiResponse");
Â  Â  aiLoadingEl = document.getElementById("aiLoading");
Â  Â  aiChapterTitleEl = document.getElementById("aiChapterTitle");
}

/**
 * Main async app setup
 */
async function initApp() {
Â  Â  loadPreferences();
Â  Â Â 
Â  Â  // Await critical data
Â  Â  await loadBookText();
Â  Â  await loadChapters(); // Loads into config.chapters
Â  Â Â 
Â  Â  // Render dynamic content
Â  Â  renderIndex();
Â  Â  renderThumbs();
Â  Â  renderPage(); // Render the loaded page

Â  Â  // Update UI with loaded data/prefs
Â  Â  if (counter) counter.textContent = `Page ${currentPage} / ${totalPages}`;
Â  Â  if (pageInput) { pageInput.max = totalPages; pageInput.value = currentPage; }
Â  Â  if (brushSizeSliderPopup) brushSizeSliderPopup.value = currentBrushSize;
Â  Â Â 
Â  Â  let savedColor = localStorage.getItem('flipbook-lastColor');
Â  Â  let activeSwatch = colorSwatchesContainer && colorSwatchesContainer.querySelector(`.color-swatch[data-pen-color="${savedColor}"]`);
Â  Â  if (!activeSwatch && colorSwatchesContainer) {
Â  Â  Â  Â  activeSwatch = colorSwatchesContainer.querySelector('.color-swatch'); // Fallback to first
Â  Â  }
Â  Â  setActiveColorSwatch(activeSwatch);
Â  Â  setDrawMode(toolType);
}

// --- Login System ---
function setupLogin() {
Â  Â  if (typeof config !== 'undefined' && config.requireLogin === true) {
Â  Â  Â  Â  loadIDs();
Â  Â  Â  Â  const lockScreen = document.getElementById('lockScreen');
Â  Â  Â  Â  if (lockScreen) lockScreen.style.display = 'flex';
Â  Â  }

Â  Â  const unlockBtn = document.getElementById('unlockBtn');
Â  Â  if (unlockBtn) {
Â  Â  Â  Â  unlockBtn.addEventListener('click', () => {
Â  Â  Â  Â  Â  Â  const idInput = document.getElementById("idInput");
Â  Â  Â  Â  Â  Â  const entered = idInput ? idInput.value.trim() : "";
Â  Â  Â  Â  Â  Â  const idError = document.getElementById("idError");
Â  Â  Â  Â  Â  Â  if (!idError) return;
Â  Â  Â  Â  Â  Â  idError.style.display = 'none';
Â  Â  Â  Â  Â  Â  if (!entered) {
Â  Â  Â  Â  Â  Â  Â  Â  idError.textContent = 'Please enter an ID';
Â  Â  Â  Â  Â  Â  Â  Â  idError.style.display = 'block';
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  if (ALLOWED_IDS.includes(entered)) {
Â  Â  Â  Â  Â  Â  Â  Â  const lockScreen = document.getElementById("lockScreen");
Â  Â  Â  Â  Â  Â  Â  Â  if (lockScreen) lockScreen.style.display = "none";
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  idError.textContent = 'Invalid ID';
Â  Â  Â  Â  Â  Â  Â  Â  idError.style.display = 'block';
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  }
}

async function loadIDs() {
Â  Â  try {
Â  Â  Â  Â  const res = await fetch("./students.json");
Â  Â  Â  Â  if (!res.ok) throw new Error("File not found");
Â  Â  Â  Â  const data = await res.json();
Â  Â  Â  Â  ALLOWED_IDS = Array.isArray(data) ? data : (Array.isArray(data.allowed) ? data.allowed : []);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Could not load student IDs:", err);
Â  Â  Â  Â  ALLOWED_IDS = [];
Â  Â  }
}

// --- Data Loading ---
async function loadBookText() {
Â  Â  try {
Â  Â  Â  Â  const res = await fetch("./book-text.json");
Â  Â  Â  Â  if (!res.ok) throw new Error("book-text.json not found");
Â  Â  Â  Â  bookTextData = await res.json();
Â  Â  Â  Â  console.log("Book text loaded successfully.");
Â  Â  Â  Â  if (searchBtn) searchBtn.disabled = false;
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Could not load book text:", err);
Â  Â  Â  Â  if (searchBtn) searchBtn.disabled = true;
Â  Â  }
}

async function loadChapters() {
Â  Â  try {
Â  Â  Â  Â  const res = await fetch("./chapters.json");Â 
Â  Â  Â  Â  if (!res.ok) throw new Error("chapters.json not found");
Â  Â  Â  Â  config.chapters = await res.json();
Â  Â  Â  Â  console.log("Chapters loaded successfully.");
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Could not load chapters:", err);
Â  Â  Â  Â  config.chapters = [];
Â  Â  }
}

// --- Page Rendering ---
function renderPage() {
Â  Â  if (!flipbook) return;
Â  Â  flipbook.innerHTML = "";
Â  Â  const pageIndex = currentPage - 1; // Convert 1-based to 0-based
Â  Â Â 
Â  Â  const wrap = document.createElement("div");
Â  Â  wrap.className = "page-wrap";
Â  Â  wrap.id = "page-wrap-" + pageIndex;
Â  Â  resetZoomPan(wrap);
Â  Â Â 
Â  Â  const img = document.createElement("img");
Â  Â  const canvas = document.createElement("canvas");
Â  Â  canvas.id = "highlight-canvas";
Â  Â  highlightCanvas = canvas;
Â  Â Â 
Â  Â  img.className = "page-image";
Â  Â  img.src = images[pageIndex];
Â  Â  img.alt = `Page ${currentPage}`;
Â  Â  img.loading = "eager";
Â  Â  img.crossOrigin = "anonymous";
Â  Â Â 
Â  Â  img.onerror = () => { img.alt = "Image not available"; img.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23eee'/%3E%3Ctext x='50%25' y='50%25' font-family='sans-serif' font-size='24' fill='%23aaa' text-anchor='middle' dominant-baseline='middle'%3EImage Not Found%3C/text%3E%3C/svg%3E"; };
Â  Â  img.onload = () => {
Â  Â  Â  Â  sizeCanvasToImage(img, canvas);
Â  Â  Â  Â  ctx = canvas.getContext('2d');
Â  Â  Â  Â  setupDrawingListeners(canvas);
Â  Â  Â  Â  loadHighlights(pageIndex);
Â  Â  Â  Â  updateCursor();
Â  Â  Â  Â  setupHammer(wrap);
Â  Â  };
Â  Â Â 
Â  Â  wrap.appendChild(img);
Â  Â  wrap.appendChild(canvas);
Â  Â  flipbook.appendChild(wrap);
Â  Â Â 
Â  Â  if (counter) counter.textContent = `Page ${currentPage} / ${totalPages}`;
Â  Â  if (pageInput) pageInput.value = currentPage;
Â  Â Â 
Â  Â  highlightThumb();
Â  Â Â 
Â  Â  // Show/hide PhET/Video buttons
Â  Â  const simConfig = config.simulations && config.simulations.find(s => s.page === currentPage);
Â  Â  if (phetBtn) phetBtn.style.display = simConfig ? 'inline-block' : 'none';
Â  Â  const videoConfig = config.videos && config.videos.find(v => v.page === currentPage);
Â  Â  if (videoBtn) videoBtn.style.display = videoConfig ? 'inline-block' : 'none';
Â  Â Â 
Â  Â  closeSearchBox();
Â  Â  closeHighlightPopup();
Â  Â  preloadImages();
Â  Â Â 
Â  Â  try { localStorage.setItem('flipbook-lastPage', pageIndex.toString()); }
Â  Â  catch (e) { console.warn("Could not save last page:", e); }
}

function renderThumbs() {
Â  Â  if (!thumbbar) return;
Â  Â  thumbbar.innerHTML = "";
Â  Â  thumbs.forEach((src, i) => {
Â  Â  Â  Â  const t = document.createElement("img");
Â  Â  Â  Â  t.src = src; t.alt = `Thumb ${i + 1}`; t.loading = "lazy";
Â  Â  Â  Â  t.addEventListener("click", () => {
Â  Â  Â  Â  Â  Â  goToPage(i + 1); // Use 1-based index
Â  Â  Â  Â  });
Â  Â  Â  Â  t.onerror = () => { t.alt = "Thumb N/A"; t.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%23eee'/%3E%3Ctext x='50%25' y='50%25' font-family='sans-serif' font-size='12' fill='%23aaa' text-anchor='middle' dominant-baseline='middle'%3EN/A%3C/text%3E%3C/svg%3E"; };
Â  Â  Â  Â  thumbbar.appendChild(t);
Â  Â  });
}

function renderIndex() {
Â  Â  if (!indexMenu) { console.error("Index menu element not found!"); return; }
Â  Â  indexMenu.innerHTML = "";
Â  Â  if (!config.chapters || config.chapters.length === 0) {
Â  Â  Â  Â  indexMenu.innerHTML = "<div class='chapter'><span>No chapters loaded.</span></div>";
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  config.chapters.forEach((chapter) => {
Â  Â  Â  Â  const chapterDiv = document.createElement("div");
Â  Â  Â  Â  chapterDiv.className = "chapter";
Â  Â  Â  Â  const chapterHeader = document.createElement("div");
Â  Â  Â  Â  chapterHeader.className = "chapter-header";
Â  Â  Â  Â  const toggleBtn = document.createElement("button");
Â  Â  Â  Â  toggleBtn.className = "toggle-btn"; toggleBtn.textContent = "â–¸";
Â  Â  Â  Â  const titleSpan = document.createElement("span");
Â  Â  Â  Â  titleSpan.textContent = chapter.title;
Â  Â  Â  Â Â 
Â  Â  Â  Â  chapterHeader.appendChild(toggleBtn);
Â  Â  Â  Â  chapterHeader.appendChild(titleSpan);
Â  Â  Â  Â  chapterDiv.appendChild(chapterHeader);

Â  Â  Â  Â  const subsectionsList = document.createElement("div");
Â  Â  Â  Â  subsectionsList.className = "subsections-list";

Â  Â  Â  Â  if (chapter.subsections && chapter.subsections.length > 0) {
Â  Â  Â  Â  Â  Â  chapter.subsections.forEach((sub) => {
Â  Â  Â  Â  Â  Â  Â  Â  const subDiv = document.createElement("div");
Â  Â  Â  Â  Â  Â  Â  Â  subDiv.className = "subsection";
Â  Â  Â  Â  Â  Â  Â  Â  subDiv.textContent = sub.title;
Â  Â  Â  Â  Â  Â  Â  Â  subDiv.onclick = () => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  goToPage(sub.page);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  closeSidebar();
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  subsectionsList.appendChild(subDiv);
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  chapterDiv.appendChild(subsectionsList);
Â  Â  Â  Â  }

Â  Â  Â  Â  toggleBtn.onclick = (e) => {
Â  Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  Â  const list = chapterDiv.querySelector(".subsections-list");
Â  Â  Â  Â  Â  Â  if (!list) return;
Â  Â  Â  Â  Â  Â  const isVisible = list.classList.toggle("visible");
Â  Â  Â  Â  Â  Â  toggleBtn.textContent = isVisible ? "â–¾" : "â–¸";
Â  Â  Â  Â  };

Â  Â  Â  Â  titleSpan.onclick = () => {
Â  Â  Â  Â  Â  Â  goToPage(chapter.page || 1);
Â  Â  Â  Â  Â  Â  closeSidebar();
Â  Â  Â  Â  };
Â  Â  Â  Â  indexMenu.appendChild(chapterDiv);
Â  Â  });
}

function preloadImages() {
Â  Â  const nextPageIndex = currentPage; // currentPage is 1-based, so index is currentPage
Â  Â  const prevPageIndex = currentPage - 2;
Â  Â  if (nextPageIndex < images.length) (new Image).src = images[nextPageIndex];
Â  Â  if (prevPageIndex >= 0) (new Image).src = images[prevPageIndex];
}

function highlightThumb() {
Â  Â  if (!thumbbar) return;
Â  Â  let activeThumb = null;
Â  Â  thumbbar.querySelectorAll("img").forEach((im, i) => {
Â  Â  Â  Â  const isActive = (i === (currentPage - 1)); // Compare 0-index to 1-based
Â  Â  Â  Â  im.classList.toggle("active", isActive);
Â  Â  Â  Â  if (isActive) activeThumb = im;
Â  Â  });
Â  Â  if (activeThumb) {
Â  Â  Â  Â  activeThumb.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
Â  Â  }
}

// --- Page Navigation ---
function firstPage() { goToPage(1); }
function lastPage() { goToPage(totalPages); }
function prevPage() { goToPage(Math.max(1, currentPage - 1)); }
function nextPage() { goToPage(Math.min(totalPages, currentPage + 1)); }

function goToPage(pageNum) {
Â  Â  const newPage = Math.max(1, Math.min(pageNum, totalPages));
Â  Â  if (newPage !== currentPage) {
Â  Â  Â  Â  currentPage = newPage;
Â  Â  Â  Â  renderPage();
Â  Â  }
}

function jumpToPage() {
Â  Â  if (pageInputTimer) { clearTimeout(pageInputTimer); pageInputTimer = null; }
Â  Â  if (!pageInput) return;
Â  Â  const v = parseInt(pageInput.value, 10);
Â  Â  if (!isNaN(v) && v >= 1 && v <= totalPages) {
Â  Â  Â  Â  goToPage(v);
Â  Â  } else {
Â  Â  Â  Â  pageInput.value = currentPage; // Reset to current page
Â  Â  }
}

// --- Toolbar Setup ---
function setupToolbar() {
Â  Â  // Navigation buttons are wired globally
Â  Â  pageInput?.addEventListener("keydown", (e) => {
Â  Â  Â  Â  if (e.key === "Enter") { jumpToPage(); e.preventDefault(); pageInput.blur(); }
Â  Â  });
Â  Â  pageInput?.addEventListener('keyup', (e) => {
Â  Â  Â  Â  if (e.key >= "0" && e.key <= "9") resetPageInputTimer();
Â  Â  });
Â  Â Â 
Â  Â  // Fullscreen and Share are wired globally
}

// --- NEW Sidebar Slide Logic (from user's 'idea' file) ---
function setupSidebarToggle() {
Â  Â  if (!indexToggle || !indexSidebar || !bookContainer) {
Â  Â  Â  Â  console.error("Sidebar elements not found in DOM.");
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  // Ensure sidebar starts hidden
Â  Â  indexSidebar.classList.remove("open");
Â  Â  bookContainer.classList.remove("shifted");
Â  Â  indexToggle.setAttribute("aria-expanded", "false");

Â  Â  indexToggle.addEventListener("click", (e) => {
Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  const isOpen = indexSidebar.classList.toggle("open");
Â  Â  Â  Â  indexToggle.setAttribute("aria-expanded", isOpen);
Â  Â  Â  Â  bookContainer.classList.toggle("shifted", isOpen);
Â  Â  });
}

function openSidebar() {
Â  Â  if (!indexSidebar.classList.contains("open")) {
Â  Â  Â  Â  indexSidebar.classList.add("open");
Â  Â  Â  Â  indexToggle.setAttribute("aria-expanded", "true");
Â  Â  Â  Â  bookContainer.classList.add("shifted");
Â  Â  }
}

function closeSidebar() {
Â  Â  if (indexSidebar.classList.contains("open")) {
Â  Â  Â  Â  indexSidebar.classList.remove("open");
Â  Â  Â  Â  indexToggle.setAttribute("aria-expanded", "false");
Â  Â  Â  Â  bookContainer.classList.remove("shifted");
Â  Â  }
}
// --- End Sidebar Logic ---

// --- Modals (PhET, Video) ---
function setupModals() {
Â  Â  if (phetBtn) phetBtn.addEventListener("click", openPhetModal);
Â  Â  if (phetCloseBtn) phetCloseBtn.addEventListener("click", closePhetModal);
Â  Â  if (phetModal) phetModal.addEventListener("click", e => { if (e.target === phetModal) closePhetModal() });

Â  Â  if (videoBtn) videoBtn.addEventListener("click", openVideoModal);
Â  Â  if (videoCloseBtn) videoCloseBtn.addEventListener("click", closeVideoModal);
Â  Â  if (videoModal) videoModal.addEventListener("click", e => { if (e.target === videoModal) closeVideoModal() });
}

function openPhetModal() {
Â  Â  const sim = config.simulations && config.simulations.find(e => e.page === currentPage);
Â  Â  if (sim && sim.url) {
Â  Â  Â  Â  if (phetFrame) phetFrame.src = sim.url;
Â  Â  Â  Â  if (phetModal) phetModal.style.display = "flex";
Â  Â  } else {
Â  Â  Â  Â  alert("No simulation found for this page.");
Â  Â  }
}
function closePhetModal() {
Â  Â  if (phetModal) phetModal.style.display = "none";
Â  Â  if (phetFrame) phetFrame.src = "about:blank";
}
function openVideoModal() {
Â  Â  const vid = config.videos && config.videos.find(e => e.page === currentPage);
Â  Â  if (vid && vid.url) {
Â  Â  Â  Â  if (videoFrame) videoFrame.src = getYoutubeEmbedUrl(vid.url);
Â  Â  Â  Â  if (videoModal) videoModal.style.display = "flex";
Â  Â  } else {
Â  Â  Â  Â  alert("No video found for this page.");
Â  Â  }
}
function closeVideoModal() {
Â  Â  if (videoModal) videoModal.style.display = "none";
Â  Â  if (videoFrame) videoFrame.src = "about:blank";
}

// --- AI Helper Modal ---
function setupAIHelper() {
Â  Â  aiHelperToggle?.addEventListener("click", () => {
Â  Â  Â  Â  const chapter = getCurrentChapter();
Â  Â  Â  Â  if (aiChapterTitleEl) aiChapterTitleEl.textContent = chapter ? chapter.title : "Current Page";
Â  Â  Â  Â  if (aiResponseEl) { aiResponseEl.innerHTML = ""; aiResponseEl.classList.remove('rtl-text'); }
Â  Â  Â  Â  if (aiModal) aiModal.style.display = "flex";
Â  Â  });
Â  Â  aiCloseBtn?.addEventListener("click", () => { if (aiModal) aiModal.style.display = "none" });
Â  Â  aiModal?.addEventListener("click", e => { if (e.target === aiModal) aiModal.style.display = "none" });
}

async function getAiHelp(type) {
Â  Â  if (!APPS_SCRIPT_PROXY_URL) {
Â  Â  Â  Â  if (aiResponseEl) aiResponseEl.textContent = "AI Helper not configured: Proxy URL missing.";
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  if (!aiLoadingEl || !aiResponseEl) return;
Â  Â  aiLoadingEl.style.display = "block";
Â  Â  aiResponseEl.innerHTML = "";
Â  Â  aiResponseEl.classList.remove('rtl-text');

Â  Â  let requestBody;
Â  Â  const chapter = getCurrentChapter();
Â  Â  const chapterTitle = chapter ? chapter.title : "this page";

Â  Â  try {
Â  Â  Â  Â  if (type === "analyze_page") {
Â  Â  Â  Â  Â  Â  let imgBase64 = await getImageAsBase64FromCanvas();
Â  Â  Â  Â  Â  Â  if (!imgBase64) {
Â  Â  Â  Â  Â  Â  Â  Â  aiResponseEl.textContent = "Could not process page image.";
Â  Â  Â  Â  Â  Â  Â  Â  aiLoadingEl.style.display = "none";
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  requestBody = { contents: [{ parts: [{ text: `Analyze this physics page (from chapter "${chapterTitle}"). Summarize concepts,explain formulas/diagrams,and give a takeaway for a life science student.` }, { inline_data: { mime_type: "image/png", data: imgBase64 } }] }] };
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  let promptText;
Â  Â  Â  Â  Â  Â  switch (type) {
Â  Â  Â  Â  Â  Â  Â  Â  case "explain":
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const concept = window.prompt(`Concept from "${chapterTitle}" to explain?`, "Pascal's Principle");
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!concept) { aiLoadingEl.style.display = "none"; return; }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  promptText = `Explain "${concept}" from "${chapterTitle}" simply for life science students.`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  Â  Â  Â  Â  case "quiz":
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  promptText = `Generate 2 multiple-choice questions on "${chapterTitle}". Explain the correct answer (bold it).`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  Â  Â  Â  Â  case "relate":
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  promptText = `Provide 2 examples of how "${chapterTitle}" applies to biology or medicine.`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aiLoadingEl.style.display = "none"; return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  requestBody = { contents: [{ parts: [{ text: promptText }] }] };
Â  Â  Â  Â  }

Â  Â  Â  Â  const fetchOptions = { method: "POST", body: JSON.stringify(requestBody), headers: { 'Content-Type': 'text/plain;charset=utf-8' } };
Â  Â  Â  Â  const response = await fetchWithRetry(APPS_SCRIPT_PROXY_URL, fetchOptions);

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  let errorMsg = `Proxy Error (${response.status}): ${response.statusText}`;
Â  Â  Â  Â  Â  Â  try { const errorData = await response.json(); errorMsg = (errorData.error && errorData.error.message) ? `API Error via Proxy: ${errorData.error.message}` : errorMsg; } catch (e) { }
Â  Â  Â  Â  Â  Â  throw new Error(errorMsg);
Â  Â  Â  Â  }
Â  Â  Â  Â  const responseData = await response.json();
Â  Â  Â  Â  if (responseData.error && responseData.error.message) { throw new Error(`API Error via Proxy: ${responseData.error.message}`); }
Â  Â  Â  Â Â 
Â  Â  Â  Â  const resultText = responseData.candidates?.[0]?.content?.parts?
